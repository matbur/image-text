package templates

templ head() {
	<head>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1"/>
		<title>image-text</title>
		// <link rel="icon" href="static/logo.jpg"/>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"/>
	</head>
}

templ githubCorner() {
	<a href="https://github.com/matbur/image-text" class="github-corner" aria-label="View source on GitHub">
		<svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true">
			<path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path>
			<path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path>
			<path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path>
		</svg>
	</a>
	<style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>
}

templ layout() {
	<!DOCTYPE html>
	<html lang="en">
		@head()
		<body
			hx-boost="true"
			hx-ext="json-enc"
		>
			@githubCorner()
			{ children... }
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx.org@2.0.3" integrity="sha384-0895/pl2MU10Hqc6jd4RvrthNlDiE9U1tWmX7WRESftEDRosgxNsQG/Ze9YMRzHq" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/json-enc.js"></script>
			<script>
			document.body.addEventListener('htmx:beforeSwap', function(evt) {
				// https://htmx.org/docs/#modifying_swapping_behavior_with_events
				if(evt.detail.xhr.status === 404){
					// alert the user when a 404 occurs (maybe use a nicer mechanism than alert())
					alert("Error: Could Not Find Resource");
				} else if(evt.detail.xhr.status === 422){
					// allow 422 responses to swap as we are using this as a signal that
					// a form was submitted with bad data and want to rerender with the
					// errors
					//
					// set isError to false to avoid error logging in console
					evt.detail.shouldSwap = true;
					evt.detail.isError = false;
				} else if(evt.detail.xhr.status === 418){
					// if the response code 418 (I'm a teapot) is returned, retarget the
					// content of the response to the element with the id `teapot`
					evt.detail.shouldSwap = true;
					evt.detail.target = htmx.find("#teapot");
				}
			});
			</script>
		</body>
	</html>
}

type IndexPageParams struct {
	Text    string `json:"text"`
	BgColor string `json:"bg_color"`
	FgColor string `json:"fg_color"`
	Size    string `json:"size"`
	Image   string `json:"-"`
}

templ IndexPage(params IndexPageParams) {
	@layout() {
		<div class="container mt-5">
			<a href="/">
				<h1>image-text</h1>
			</a>
			<a href="/docs" hx-boost="false">docs</a>
			<form
				id="dynamicForm"
				method="post"
				action="/"
				hx-post="/post"
				hx-target="body"
			>
				<div class="form-group">
					<label for="textInput">Text:</label>
					<input
						type="text"
						id="textInput"
						class="form-control"
						value={ params.Text }
						name="text"
					/>
				</div>
				<div class="form-group">
					<label for="bgColor">Background Color:</label>
					<input
						type="text"
						id="bgColor"
						class="form-control"
						value={ params.BgColor }
						name="bg_color"
					/>
				</div>
				<div class="form-group">
					<label for="fgColor">Foreground Color:</label>
					<input
						type="text"
						id="fgColor"
						class="form-control"
						value={ params.FgColor }
						name="fg_color"
					/>
				</div>
				<div class="form-group">
					<label for="size">Size:</label>
					<input
						type="text"
						id="size"
						class="form-control"
						value={ params.Size }
						name="size"
					/>
				</div>
				<button type="submit" class="btn btn-primary">Submit</button>
			</form>
			<div class="mt-3">
				if params.Image != "" {
					<img src={ params.Image }/>
				}
			</div>
		</div>
	}
}
